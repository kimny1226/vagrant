# 初回時(未検証)
vagrant plugin install vagrant-vbguest
vagrant vbguest
vagrant up

# 再起動
vagrant reload --provision

cat /etc/redhat-release


vagrant plugin install vagrant-vbguest
vagrant plugin install vagrant-docker-compose

$ vagrant plugin list
vagrant-docker-compose (1.3.0)
vagrant-vbguest (0.16.0)

マウントに失敗する場合
$ An error occurred during installation of VirtualBox Guest Additions 5.1.38. Some functionality may not work as intended.
$ In most cases it is OK that the "Window System drivers" installation failed.
↓
vagrant vbguest

ssh後
sudo yum -y install update kernel
sudo yum -y install kernel-devel kernel-headers gcc gcc-c++


これは不要？
sudo /etc/init.d/vboxadd setup

■CentOS7.5に最新バージョンのDockerをインストールする
https://qiita.com/okcoder/items/e91f1e339c114e0be129

  公式
  https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-old-versions

#古いdocker 削除
sudo yum remove docker  docker-client  docker-client-latest  docker-common  docker-latest  docker-latest-logrotate  docker-logrotate  docker-selinux  docker-engine-selinux  docker-engine


#
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

sudo yum install docker-ce -y



sudo systemctl enable docker
sudo systemctl start docker



sudo usermod -aG docker $USER



■docker-composeの最新Verでインストール
https://qiita.com/fake-deli-ca/items/955f648036fe803e4f33

#!/bin/bash
compose_version=$(curl https://api.github.com/repos/docker/compose/releases/latest | jq .name -r)
output='/usr/local/bin/docker-compose'
curl -L https://github.com/docker/compose/releases/download/$compose_version/docker-compose-$(uname -s)-$(uname -m) -o $output
chmod +x $output
echo $(docker-compose --version)




git submodule add [外部リポジトリ] [ローカルで格納したいディレクトリ]

git submodule add https://github.com/kimny1226/proc.git sources



vagrant box list
vagrant box remove centos/7

vagrant plugin list


vagrant up --provision
vagrant reload --provision


[vagrant@localhost ~]$ docker -v
Docker version 18.09.6, build 481bc77156
[vagrant@localhost ~]$ docker-compose -v
docker-compose version 1.11.2, build dfed245
[vagrant@localhost ~]$



docker-compose up -d --build




RUN apt-get update && apt-get install -y \
    git \
    unzip \
    zlib1g-dev \
    && docker-php-ext-install \
    zip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl -s http://getcomposer.org/installer | php && \
    echo "export PATH=${PATH}:/var/www/vendor/bin" >> ~/.bashrc && \
    mv composer.phar /usr/local/bin/composer




sudo yum -y install epel-release.noarch
sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
sudo yum -y install --enablerepo=remi,remi-php70 php php-devel php-mbstring php-pdo php-gd php-mysql php-xml

$ sudo yum clean all

$ curl -sS https://getcomposer.org/installer | php -- --install-dir=/tmp
$ sudo mv /tmp/composer.phar /usr/local/bin/composer



  ゲスト側に入れるか、コンテナ側で行うか。ホスト側で操作すれば済む
  # composer install (php install)
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum -y install epel-release.noarch
    sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
    sudo yum -y install --enablerepo=remi,remi-php70 php php-devel php-mbstring php-pdo php-gd php-mysql php-xml
    sudo yum clean all
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/tmp
    sudo mv /tmp/composer.phar /usr/local/bin/composer
  SHELL



composer create-project --prefer-dist laravel/laravel laravel_test 5.5.*
composer create-project --prefer-dist laravel/laravel laravel_test 6.*

php-devel php-mbstring php-pdo php-gd php-mysqlnd php-intl phpunit

# chmod -R 777 storage
# chmod -R 777 bootstrap/cache


php+必要なもの
sudo yum install -y --enablerepo=remi,remi-php72 php php-devel php-mbstring php-pdo php-xml php-zip1

sudo yum install -y zip unzip


docker-compose exec web bash


chmod 777 -R storage
chmod 777 -R laravel_test/storage
chmod 777 -R laravel_test/bootstrap/cache



alias ll='ls -al'
alias vssh='vagrant ssh -c "cd /vagrant; bash"';

alias dc='docker-compose'


docker-compose exec --user 1000 web bash

これも不要
  # config.vm.synced_folder "./", "/vagrant", type:"virtualbox", :owner => 'vagrant', :group => 'vagrant', mount_options: ['dmode=777','fmode=775']



ゴミ掃除
vagrant global-status


vagrant global-status --prune




laravel関連

php artisan key:generate
php artisan migrate


docker関連
コンテナ削除
docker ps -a
docker rm 7a5a7211e0ce 476851e5d91a

イメージ削除
docker images
docker rmi 7faa3c53e6d6


▼AmazonLinux2のDockerイメージに日本語ローケルを設定
https://qiita.com/yuyj109/items/a56e562599972eb37abd
Dockerfile

FROM amazonlinux:2

RUN yum install -y glibc-langpack-ja && yum clean all
ENV LANG ja_JP.utf8
ENV LC_ALL ja_JP.utf8

RUN unlink /etc/localtime
RUN ln -s /usr/share/zoneinfo/Japan /etc/localtime

CMD ["/bin/bash"]


HostOS[Windows10]


          GuestOS[centos/7]


              Apache 2.4
                  000-default.conf(DocumentRoot変更)
                  

              App
  sources         
    eccube        eccube
    laravel       laravel

              MySQL[<==>Amazon Aurora(MySQL)]

              Redis[<==>Amazon ElastiCache(Redis)]


  [CMD] HostOS側かGuestOS側にするのか。
    php artisan (php install)
    php bin/console
    composer install (Composer install)
    git (git install)


# Composer並列化プラグイン
composer global require hirak/prestissimo

# アンインストール
composer global remove hirak/prestissimo


# CentOS7に手動でインストールする場合の中身(ローカルはpluginのが楽で記述も少ない)
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo yum makecache fast
    sudo yum install -y docker-ce
    sudo systemctl enable docker-ce
    sudo systemctl start docker-ce
    sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > docker-compose
    sudo mv docker-compose /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo gpasswd -a vagrant docker
    sudo systemctl restart docker
  SHELL



# intl拡張モジュール 有効
RUN apt-get update -y && apt-get install -y \
    libicu-dev \
    && docker-php-ext-configure intl \
    && docker-php-ext-install intl
# mod_rewrite 有効
RUN a2enmod rewrite




# コンテナに入る
docker exec -it mysql5.7_admin bash

# dump出力
root@51b16c09b13a:/# mysqldump -u user -p admin_db > admin_db.sql
# ファイル確認(コンテナ内)
root@51b16c09b13a:/# ls -l
total 224
-rw-r--r--.   1 root root 141619 Sep  8 12:49 admin_db.sql

# コンテナID 表示
[vagrant@localhost vagrant]$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
645f8b9197c8        vagrant_web         "docker-php-entrypoi…"   17 minutes ago      Up 16 minutes       0.0.0.0:80->80/tcp                  web
25be92b88efc        redis               "docker-entrypoint.s…"   17 minutes ago      Up 17 minutes       6379/tcp                            redis
51b16c09b13a        mysql:5.7           "docker-entrypoint.s…"   17 minutes ago      Up 17 minutes       0.0.0.0:3306->3306/tcp, 33060/tcp   mysql5.7_admin
[vagrant@localhost vagrant]$ 

# コンテナ内のファイルをホストにコピー
sudo docker cp 51b16c09b13a:/admin_db.sql /vagrant

# ファイル確認(ホスト側)
[vagrant@localhost vagrant]$ ll /vagrant/
total 154
-rwxrwxr-x. 1 vagrant vagrant 141619 Sep  8 12:32 admin_db.sql





# 別環境にて流し込み
mysql -u root -p admin_db < admin_db.sql
mysql -u user -p admin_db -h 192.168.33.10 < admin_db.sql

# DB DUMP(外から繋がるならこれでOK)
mysqldump -u user -p admin_db -h 192.168.33.10 > admin_db.sql

# windowsでxamppなら、環境変数にPATH通しておくと楽
D:\tools\xampp\mysql\bin
D:\tools\xampp\php



### SSL化(オレオレ証明書ならこの設定は不要かも)
# 000-default.conf
#  ↓ に格納される
/etc/apache2/sites-available/000-default.conf

# デフォルトのssl設定は↓
/etc/apache2/sites-available/default-ssl.conf
        SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
        SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key


# 1. 秘密鍵とサーバ証明書の作成
# 格納ディレクトリ作成、移動
mkdir ssl
cd ssl

# 1-1. 秘密鍵
openssl genrsa > server.key

# 1-2. CSRファイル生成(全てEnterでSkip)
#     認証局にサーバ証明書を発行してもらう時に使用する情報ファイル
openssl req -new -key server.key > server.csr

# 1-3. サーバ証明書作成
openssl x509 -req -signkey server.key < server.csr > server.crt

# (1-4. CSR削除)
rm server.csr



# コンテナ、イメージ、ボリューム、ネットワークそして未定義コンテナ、全てを一括消去する
docker-compose down --rmi all --volumes
